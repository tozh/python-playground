a = [["1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","0","1","0","1","1"],["0","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","0"],["1","0","1","1","1","0","0","1","1","0","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","0","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","0","1","1","1","1","1","1","0","1","1","1","0","1","1","1","0","1","1","1"],["0","1","1","1","1","1","1","1","1","1","1","1","0","1","1","0","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","0","1","1"],["1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["0","1","1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","0","1","1","1","1","1","1","1","0","1","1","1","1","1","1"],["1","0","1","1","1","1","1","0","1","1","1","0","1","1","1","1","0","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1","0"],["1","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","0","0"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"]]

class Solution:
    def numIslands(self, grid):
        """
        :type grid: List[List[str]]
        :rtype: int
        """
        self.grid = grid
        self.M = len(grid)
        if self.M == 0:
            return 0
        self.N = len(grid[0])
        if self.N == 0:
            return 0
        self.discovered = [[False for _ in range(self.N)] for __ in range(self.M)]
        count = 0
        for i in range(self.M):
            for j in range(self.N):
                print("------->",i, j)
                if self.grid[i][j] == "1" and not self.discovered[i][j]:
                    count += 1
                    # do spreads
                    self.discovered[i][j] = True
                    ns = self.get_ns(i, j)
                    print(i, j)
                    while ns:
                        new_ns = []
                        for n in ns:
                            new_ns += self.get_ns(n[0], n[1])
                        ns = new_ns
        return count

    def get_ns(self, i, j):
        res = [(i + a, j + b) for a, b in ((0, 1), (0, -1), (1, 0), (-1, 0)) if
               0 <= i + a < self.M and 0 <= j + b < self.N and self.grid[i + a][j + b] == "1" and not
               self.discovered[i + a][j + b]]
        for i, j in res:
            self.discovered[i][j] = True
        return res

s = Solution()
print(s.numIslands(a))